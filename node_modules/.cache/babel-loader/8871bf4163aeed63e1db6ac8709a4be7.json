{"ast":null,"code":"var _jsxFileName = \"/home/hitesh/work/projects/diamond-sweeper/src/client/components/pages/Game/Game.jsx\";\nimport React from 'react';\nimport DiceGif from '../../../assets/dice.gif';\nimport './game.scss';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst Game = props => {\n  const GAMEROW = 8,\n        GAMECOL = 8; //Utills\n\n  const getPlaceholder = (row, col) => {\n    return row * 10 + (row % 2 === 0 ? col + 1 : GAMECOL - col);\n  }; //Initial data\n\n\n  let initialGame = [];\n  let diamondCount = 0;\n  let diamnodPos = [];\n  const [openCards, setOpenCards] = useState([]);\n\n  for (let i = 0; i < GAMEROW; i++) {\n    initialGame[i] = [];\n    let hasDiamond = false;\n\n    for (let j = 0; j < GAMECOL; j++) {\n      if (Math.random() * 10 > 4.5 && !hasDiamond) {\n        initialGame[i][j] = true;\n        diamnodPos.push(i + \"\" + j);\n        diamondCount++;\n        hasDiamond = true;\n      } else {\n        initialGame[i][j] = false;\n      }\n    }\n  }\n\n  console.log(initialGame);\n\n  const openCard = (rowIndex, colIndex) => {\n    let newArr = [...openCards];\n    newArr.push(rowIndex + '' + colIndex);\n    setOpenCards(newArr);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, \"Diamond Sweeper\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, initialGame.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      key: rowIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 32\n      }\n    }, row.map((col, colIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'col',\n        key: rowIndex + colIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 40\n        }\n      }, openCards.indexOf(rowIndex + '' + colIndex) != -1 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"board-place\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 41\n        }\n      }, diamnodPos.indexOf(rowIndex + '' + colIndex) != -1 ? /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-diamond\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 49\n        }\n      }) : null) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"board-place\",\n        onClick: () => openCard(rowIndex, colIndex),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-question\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 115\n        }\n      })));\n    }));\n  }))));\n};\n\nexport default Game;","map":{"version":3,"sources":["/home/hitesh/work/projects/diamond-sweeper/src/client/components/pages/Game/Game.jsx"],"names":["React","DiceGif","useState","useEffect","Game","props","GAMEROW","GAMECOL","getPlaceholder","row","col","initialGame","diamondCount","diamnodPos","openCards","setOpenCards","i","hasDiamond","j","Math","random","push","console","log","openCard","rowIndex","colIndex","newArr","map","indexOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DiceGif from '../../../assets/dice.gif';\nimport './game.scss';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst Game = (props) => {\n\n    const GAMEROW = 8, GAMECOL = 8;\n\n    //Utills\n    const getPlaceholder = (row, col) => {\n        return row * 10 + (row % 2 === 0 ? col + 1 : GAMECOL - col);\n    }\n\n    //Initial data\n    let initialGame = [];\n    let diamondCount = 0;\n    let diamnodPos = [];\n    const [openCards, setOpenCards] = useState([]);\n    for (let i = 0; i < GAMEROW; i++) {\n        initialGame[i] = [];\n        let hasDiamond = false;\n        for (let j = 0; j < GAMECOL; j++) {\n            if ((Math.random() * 10) > 4.5 && !hasDiamond) {\n                initialGame[i][j] = true;\n                diamnodPos.push(i + \"\" + j);\n                diamondCount++;\n                hasDiamond = true;\n            } else {\n                initialGame[i][j] = false;\n            }\n        }\n    }\n    console.log(initialGame)\n\n    const openCard = (rowIndex, colIndex) => {\n        let newArr = [...openCards];\n        newArr.push(rowIndex+''+colIndex);\n        setOpenCards(newArr);\n    }\n\n    return (\n        <>\n            <div className='game-container'>\n                <h2 className='heading'>Diamond Sweeper</h2>\n                <div className='board'>\n                    {initialGame.map((row, rowIndex) => {\n                        return <div className='row' key={rowIndex}>\n                            {row.map((col, colIndex) => {\n                                return <div className={'col'} key={rowIndex+colIndex}>\n                                    {openCards.indexOf(rowIndex+''+colIndex) != -1 ? (\n                                        <div className='board-place'>\n                                            {diamnodPos.indexOf(rowIndex+''+colIndex) != -1  ? (\n                                                <i className='fa fa-diamond'></i>\n                                            ) : (\n                                                null\n                                            )}\n                                        </div>\n                                    ) : (\n                                        <div className='board-place' onClick={() => openCard(rowIndex, colIndex)}><i className='fa fa-question'></i></div>\n                                    )}\n                                </div>\n                            })}\n                        </div>\n                    })}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}