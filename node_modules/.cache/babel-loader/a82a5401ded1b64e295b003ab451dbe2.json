{"ast":null,"code":"var _jsxFileName = \"/home/hitesh/work/projects/diamond-sweeper/src/client/components/pages/Game/Game.jsx\";\nimport React from 'react';\nimport DiceGif from '../../../assets/dice.gif';\nimport './game.scss';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst Game = props => {\n  const GAMEROW = 8,\n        GAMECOL = 8; //Initial data\n\n  let initialGame = [];\n  const [gameState, setGameState] = useState([]);\n  const [openCards, setOpenCards] = useState([]); //Utills\n\n  const getPlaceholder = (row, col) => {\n    let pos = row + '' + col;\n\n    if (openCards.indexOf(pos) != -1) {\n      if (gameState[row][col]) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"board-place\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 24\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"fa fa-diamond\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 53\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"board-place\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 24\n          }\n        });\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"board-place\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-question\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 49\n        }\n      }));\n    }\n  };\n\n  const openCard = (rowIndex, colIndex) => {\n    let newArr = [...openCards];\n    newArr.push(rowIndex + '' + colIndex);\n    setOpenCards(newArr);\n  };\n\n  useEffect(() => {\n    for (let i = 0; i < GAMEROW; i++) {\n      initialGame[i] = [];\n      let hasDiamond = false;\n\n      for (let j = 0; j < GAMECOL; j++) {\n        if ((Math.random() * 10 > 7 || j == GAMECOL - 1) && !hasDiamond) {\n          initialGame[i][j] = true;\n          hasDiamond = true;\n        } else {\n          initialGame[i][j] = false;\n        }\n      }\n    }\n\n    setGameState(initialGame);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"Diamond Sweeper\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, gameState.map((row, rowIndex) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      key: rowIndex + '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 32\n      }\n    }, row.map((col, colIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'col',\n        key: rowIndex + '' + colIndex,\n        onClick: () => openCard(rowIndex, colIndex),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 40\n        }\n      }, getPlaceholder(rowIndex, colIndex));\n    }));\n  }))));\n};\n\nexport default Game;","map":{"version":3,"sources":["/home/hitesh/work/projects/diamond-sweeper/src/client/components/pages/Game/Game.jsx"],"names":["React","DiceGif","useState","useEffect","Game","props","GAMEROW","GAMECOL","initialGame","gameState","setGameState","openCards","setOpenCards","getPlaceholder","row","col","pos","indexOf","openCard","rowIndex","colIndex","newArr","push","i","hasDiamond","j","Math","random","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DiceGif from '../../../assets/dice.gif';\nimport './game.scss';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst Game = (props) => {\n\n    const GAMEROW = 8, GAMECOL = 8;\n\n    //Initial data\n    let initialGame = [];\n    const [gameState, setGameState] = useState([]);\n    const [openCards, setOpenCards] = useState([]);\n\n    //Utills\n    const getPlaceholder = (row, col) => {\n        let pos = row+''+col;\n        if(openCards.indexOf(pos) != -1){\n            if(gameState[row][col]){\n                return <div className='board-place'><i className='fa fa-diamond'></i></div>\n            }else{\n                return <div className='board-place'></div>\n            }\n        }else{\n            return <div className='board-place'><i className='fa fa-question'></i></div>\n        }\n    }\n\n    const openCard = (rowIndex, colIndex) => {\n        let newArr = [...openCards];\n        newArr.push(rowIndex+''+colIndex);\n        setOpenCards(newArr);\n    }\n\n    useEffect(() => {\n        for (let i = 0; i < GAMEROW; i++) {\n            initialGame[i] = [];\n            let hasDiamond = false;\n            for (let j = 0; j < GAMECOL; j++) {\n                if (((Math.random() * 10) > 7 || j == GAMECOL - 1) && !hasDiamond) {\n                    initialGame[i][j] = true;\n                    hasDiamond = true;\n                } else {\n                    initialGame[i][j] = false;\n                }\n            }\n        }\n        setGameState(initialGame)\n    }, [])\n\n    return (\n        <>\n            <div className='game-container'>\n                <h2 className='heading'>Diamond Sweeper</h2>\n                <div className='board'>\n                    {gameState.map((row, rowIndex) => {\n                        return <div className='row' key={rowIndex+''}>\n                            {row.map((col, colIndex) => {\n                                return <div className={'col'} key={rowIndex+''+colIndex} onClick={() => openCard(rowIndex, colIndex)}>\n                                    {getPlaceholder(rowIndex, colIndex)}\n                                </div>\n                            })}\n                        </div>\n                    })}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}