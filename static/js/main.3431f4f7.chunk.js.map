{"version":3,"sources":["client/components/pages/Game/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Game","props","useState","gameState","setGameState","openCards","setOpenCards","revealedDiamondCount","setRevealedDiamondCount","isFinish","setFinish","useEffect","min","max","diamondPos","initialGame","i","push","Math","round","random","j","indexOf","Number","className","GAMEROW","length","onClick","window","location","reload","map","row","rowIndex","key","col","colIndex","newArr","openCard","pos","getPlaceholder","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRA0FeA,G,MArFF,SAACC,GAEV,IAFoB,EAMcC,mBAAS,IANvB,mBAMbC,EANa,KAMFC,EANE,OAOcF,mBAAS,IAPvB,mBAObG,EAPa,KAOFC,EAPE,OAQoCJ,mBAAS,GAR7C,mBAQbK,EARa,KAQSC,EART,OASUN,oBAAS,GATnB,mBASbO,EATa,KASHC,EATG,KAgEpB,OAlBAC,qBAAU,WAEN,IADA,IAtBkBC,EAAKC,EAsBnBC,EAAa,GAAIC,EAAc,GAC3BC,EAAI,EAAGA,EA9C4B,EA8CVA,IAC7BF,EAAWG,MAxBGL,EAwBe,GAAGI,EAxBbH,EAwBgB,GAAGG,EAAH,EAvBhCE,KAAKC,MAAMD,KAAKE,UAAYP,EAAMD,GAAOA,KAyBhD,IAAK,IAAII,EAAI,EAAGA,EAjDJ,EAiDiBA,IAAK,CAC9BD,EAAYC,GAAK,GACjB,IAAK,IAAIK,EAAI,EAAGA,EAnDK,EAmDQA,KACmB,IAAxCP,EAAWQ,QAAQC,OAAOP,EAAE,GAAGK,IAC/BN,EAAYC,GAAGK,IAAK,EAEpBN,EAAYC,GAAGK,IAAK,EAIhCjB,EAAaW,KACd,IAGC,oCACI,yBAAKS,UAAU,kBACX,wBAAIA,UAAU,WAAd,mBACCf,EAAW,wBAAIe,UAAU,iBAAd,4BAAyDC,GAAmBpB,EAAUqB,OAAtF,KAA+F,0BAAMF,UAAU,YAAYG,QAAS,kBAAMC,OAAOC,SAASC,WAA3D,cAA/F,kBAA2M,KACvN,yBAAKN,UAAU,SACVrB,EAAU4B,KAAI,SAACC,EAAKC,GACjB,OAAO,yBAAKT,UAAU,MAAMU,IAAKD,EAAS,IACrCD,EAAID,KAAI,SAACI,EAAKC,GACX,OAAO,yBAAKZ,UAAW,MAAOU,IAAKD,EAAS,GAAGG,EAAUT,QAAS,kBA5C7E,SAACM,EAAUG,GACxB,IAAG3B,EAAH,CAGA,IAAI4B,EAAM,YAAOhC,GACjBgC,EAAOpB,KAAKgB,EAAS,GAAGG,GACxB9B,EAAa+B,GAEVlC,EAAU8B,GAAUG,KACS,IAAzB7B,EACCG,GAAU,GAEVF,EAAwBD,EAAuB,KAgCyC+B,CAASL,EAAUG,KA7DhG,SAACJ,EAAKG,GACzB,IAAII,EAAMP,EAAI,GAAGG,EACjB,OAA+B,IAA5B9B,EAAUiB,QAAQiB,GACdpC,EAAU6B,GAAKG,GACP,yBAAKX,UAAU,eAAc,uBAAGA,UAAU,mBAE1C,yBAAKA,UAAU,gBAGnB,yBAAKA,UAAU,eAAc,uBAAGA,UAAU,oBAqDxBgB,CAAeP,EAAUG,gB,MCnE/CK,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3431f4f7.chunk.js","sourcesContent":["import React from 'react';\nimport './game.scss';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst Game = (props) => {\n\n    const GAMEROW = 8, GAMECOL = 8, MAX_DIAMONDS = 8;\n\n    //Initial data\n    let initialGame = [];\n    const [gameState, setGameState] = useState([]);\n    const [openCards, setOpenCards] = useState([]);\n    const [revealedDiamondCount, setRevealedDiamondCount] = useState(0);\n    const [isFinish, setFinish] = useState(false);\n\n    //Utills\n    const getPlaceholder = (row, col) => {\n        let pos = row+''+col;\n        if(openCards.indexOf(pos) !== -1){\n            if(gameState[row][col]){\n                return <div className='board-place'><i className='fa fa-diamond'></i></div>\n            }else{\n                return <div className='board-place'></div>\n            }\n        }else{\n            return <div className='board-place'><i className='fa fa-question'></i></div>\n        }\n    }\n\n    const randomNumber = (min, max) => {  \n        return Math.round(Math.random() * (max - min) + min); \n    }\n\n    const openCard = (rowIndex, colIndex) => {\n        if(isFinish){\n            return;\n        }\n        let newArr = [...openCards];\n        newArr.push(rowIndex+''+colIndex);\n        setOpenCards(newArr);\n\n        if(gameState[rowIndex][colIndex]){\n            if(revealedDiamondCount === 7){\n                setFinish(true);\n            }else{\n                setRevealedDiamondCount(revealedDiamondCount + 1);\n            }\n        }   \n    }\n\n    useEffect(() => {\n        let diamondPos = [], initialGame = [];\n        for(let i = 0; i < MAX_DIAMONDS; i++){\n            diamondPos.push(randomNumber(10*i, 10*i+(GAMECOL - 1)));\n        }\n        for (let i = 0; i < GAMEROW; i++) {\n            initialGame[i] = [];\n            for (let j = 0; j < GAMECOL; j++) {\n                if (diamondPos.indexOf(Number(i+''+j)) !== -1) {\n                    initialGame[i][j] = true;\n                } else {\n                    initialGame[i][j] = false;\n                }\n            }\n        }\n        setGameState(initialGame)\n    }, [])\n\n    return (\n        <>\n            <div className='game-container'>\n                <h2 className='heading'>Diamond Sweeper</h2>\n                {isFinish ? <h3 className='green-heading'>You won! Your score is : {(GAMEROW*GAMECOL) - openCards.length}, <span className='blue-text' onClick={() => window.location.reload()}>Click here</span> to play again</h3> : null}\n                <div className='board'>\n                    {gameState.map((row, rowIndex) => {\n                        return <div className='row' key={rowIndex+''}>\n                            {row.map((col, colIndex) => {\n                                return <div className={'col'} key={rowIndex+''+colIndex} onClick={() => openCard(rowIndex, colIndex)}>\n                                    {getPlaceholder(rowIndex, colIndex)}\n                                </div>\n                            })}\n                        </div>\n                    })}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Game;","import React from 'react';\nimport Game from './client/components/pages/Game/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}